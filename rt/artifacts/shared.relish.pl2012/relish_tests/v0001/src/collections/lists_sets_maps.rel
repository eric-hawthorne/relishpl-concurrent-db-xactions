origin   relish.pl2012
artifact relish_tests
package  collections 

""" 
 lists_sets_maps.rel

 Test collection and map construction, manipulation, and accessing, including db-query collection constructors.
 Note. This test first executes the model test, to create objects that can be put in collections.
"""

import
   model
   model/machines/vehicles
   model/machines/engines
   relish.pl2012/relish_test_support/things/pkg/physical_objects as phys
   model/people
   strings
   

listTest
   a vehicles.Wheel
   b vehicles.Wheel
   c vehicles.Wheel
>
   [] vehicles.Wheel
"""
 Puts some items in a list and returns the list.
"""   
   theList = [a b c]vehicles.Wheel
   => theList


main
"""
 Main program.
"""
   testCollections


testCollections
"""
 Test lists, maps, sets.
"""

   model.testModel  // Create some objects 

   allWheels = []vehicles.Wheel "num > 0 order by num"

   print "All wheels:"
   for aWheel in allWheels
      print aWheel.num

   bigWheels = []vehicles.Wheel "num > 2"

   for i wheel in bigWheels
      print "bigWheels[" i "] =" wheel.num
      if eq i 0
         theWheel = wheel

   print contains bigWheels theWheel  // Should print true

   smallWheels = []vehicles.Wheel  // An empty list of Wheels

   print contains smallWheels theWheel  // Should print false

   print "len bigWheels =" (len bigWheels)
   print "len smallWheels =" (len smallWheels)

   spares = [allWheels[0] allWheels[1] allWheels[2]]vehicles.Wheel

   print "spares[1] =" spares[1].num

   vcls = []vehicles.Vehicle "lat > 48" 
   for vhcl in vcls 
      print "vehicle lat long"
      print vhcl.lat vhcl.long

   map1 = {"One"=>allWheels[0] "Two"=>allWheels[1] "Three"=>allWheels[2]}String > vehicles.Wheel

   map2 = {}String > vehicles.Wheel

   wheelFourFound = map1[? "Four"]
   print "map1[? \"Four\"] =" wheelFourFound
   print map1[! "Three"].num
   for key in map1
      print key
   for key val in map1
      print key val.num

   wh2 found = map1["Two"]
   print wh2.num found

   wh2 found = map1["two"]
   print wh2 found   

   map1["Four"] = allWheels[3]

   print map1[! "Four"].num



   solarSystem = {
                    1 => "Mercury"
                    2 => "Venus"
                    3 => "Earth"
                    4 => "Mars"
                 }Int 
                  > 
                     String

   print solarSystem[! 1]

   outerSolarSystem = {
                         "Jupiter" => 5
                         "Saturn"  => 6
                         "Uranus"  => 7
                         "Neptune" => 8
                      }String > Int 

   for k v in outerSolarSystem
      print k v   


   sales = [1.29 4.25 0.33 5.981]
   print sum sales  // should print 11.851

   sales1 = sales[:neg 2]
   print sales1
   sales1 = sales[1:neg 2]
   print sales1
   sales1 = sales[2:neg 2]
   print sales1
   sales1 = sales[:]
   print sales1
   sales1 = sales[2:]
   print sales1
   sales1 = sales[:3]
   print sales1
   sales1 = sales[2:3]
   print sales1
   sales1 = sales[
                    2
                    :
                    plus 1
                         2
                 ]
   print sales1

   scores = [22 9 0 13]
   print sum scores  // should print 44

   print contains scores 22  // should print true

   taxedSales = [
                   for sale in sales
                      times sale 1.10
                ]Float

   print sum taxedSales

   taxedBigSales = [
                      for sale in sales
                         if gt sale 1.0
                            times sale 1.10
                   ]Float

   print sum taxedBigSales


   opps = {
             for ky vl 
                in 
                   ["left" "up" "inside"]
                   ["right" "down" "outside"]
                ky vl
          }String > String
   
   for key9 val9 in opps
      print key9 val9
   print opps["left"] opps["up"]

   opps2 = {
              for val3 in ["left" "up" "inside"]
                 val3
                 cat "[" val3 "]"
           }String > String
   
   for key8 val8 in opps2
      print key8 val8
   print opps2["left"] opps2["up"]
 

   places = ["left" "inside" "up"]    

   opps3 = {
              for val4 in places
                 val4
                 cat "[" val4 "]"
           }String > String
   
   for key7 val7 in opps3
      print key7 val7
   print opps3["left"] opps3["up"]

   opps4 = {
              for key6 val6 in opps
                 if lt (len key6) 5
                    if lt (len val6) 5
                       key6 val6
                    else
                       key6
                       first val6 3
                 else
                    if lt (len val6) 5
                       first key6 3
                       val6
                    else
                       first key6 3
                       first val6 3
           }String > String
   
   for key5 val5 in opps4
      print key5 val5

   for whNum in [
                   for whel1
                      in 
                         listTest
                            allWheels[2]
                            allWheels[1]
                            allWheels[1]
                      whel1.num
                ]Int
      print whNum

   youngsters = []people.Person "dateOfBirth > '1982-09-23'"

   for person in youngsters
      print person.firstName person.lastName

   clear allWheels

   print len allWheels

   clear opps4

   print len opps4

   records = [
                ["First name" "Last name"]
                ["Joe" "DiMaggio"]
             ][] String   

   print records  

   foo places

   places += "right"

   print places

   fakeCollection = nil
   for i val in fakeCollection
      print "Oops!"
      

foo a [] String
"""
 Tests argument type compatibility of collection-type args.
 This was failing to be dispatched to when called on a [] String argument.
"""
   print a
   print "Succeeded"


        