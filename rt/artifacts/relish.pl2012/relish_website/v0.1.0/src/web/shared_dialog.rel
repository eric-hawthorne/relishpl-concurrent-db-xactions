origin   relish.pl2012
artifact relish_website
package  web 

""" 
 shared_dialog.rel

 Web dialog handling methods for the shared.relish.pl sitelet.
"""


import
   http_srv
   strings
   files
   model
   crypto
   datetime


register > String String
"""
 Handles a request for the "register a code origin" page.
"""
   => "HTML FILE"
      "register.html"


registerAction 
   givenName String
   familyName String
   organization String
   dept String
   email String
   email2 String
   password String
   password2 String
   originId String
> 
   String 
   String
"""
 Processes a "register a code origin" request.
 Validates registration form info. Makes sure origin is not already registered.
 Sends an email message to have the registrant confirm the registration.
"""
   givenName = trimSpace givenName
   familyName = trimSpace familyName
   organization = trimSpace organization
   dept = trimSpace dept
   email = trimSpace email
   email2 = trimSpace email2
   password = trimSpace password
   password2 = trimSpace password2
   originId = trimSpace originId
   print givenName familyName
   print organization dept
   print email email2
   print password password2
   print originId

   if not givenName
      => errf "Please enter the given name (first name in western tradition) of a contact person for the code origin."
   if not familyName
      => errf "Please enter the family name (last name in western tradition) of a contact person for the code origin."

   if not email
      => errf "Please enter a contact email address for the code origin."
   if lt (index email "@") 1
      => errf "Please enter a valid contact email address for the code origin."
   if lt lastIndex email "." 
         plus 2 (index email "@")
      => errf "Please enter a valid contact email address for the code origin."
   if neq email email2
      => errf "Emails don't match. Please re-enter."

   if neq password password2
      => errf "Passwords don't match. Please re-enter."

   err = originIdError originId
   if err
      => errf err
 
   pwHash = base64Hash password
   emailVerificationToken = base64Hash cat pwHash email originId

   smtpServer = "mail.bcit.ca:25"

   requestToConfirmRegistration = 
      fill """
If you are registering the relish code origin %s please confirm this
and complete the origin registration by clicking the following link:
http://shared.relish.pl/verifyRegistration/%s/%s

If you do not know what this email message is about, please delete it.
It means someone else has inadvertently or deliberately used your 
email address as the contact address for creating a relish code origin.
See http://relish.pl if you have more questions.
"""
           originId
           originId
           emailVerificationToken

   err = sendEmail 
            smtpServer
            "relishpl@gmail.com"  
            email
            "Confirm registration of relish code origin"
            requestToConfirmRegistration
     
   if err
      print "Sending email to" email
      print "Subject: Confirm registration of relish code origin"
      print requestToConfirmRegistration
      print err
      print "ignoring email error during testing"
      // => errf err
         
   o = model.Origin
   o.ident = originId
   o.contactGivenName = givenName
   o.contactFamilyName = familyName
   o.organization = organization
   o.department = dept
   o.email = email
   o.pwHash = pwHash
   o.isPublic = false
   o.isVerified = false
   o.emailVerificationToken = emailVerificationToken
   o.publicKeyCert = ""
   o.registered = now "UTC"

   dub o originId

   => "HTML FILE"
      "register_continue.html"


verifyRegistration originId String token String > String String 
"""
 Processes a confirmation of registration.
 An email message has been sent to the origin contact email address and the confirmation link has been clicked.
"""
   if not exists originId
      => errf cat originId " is not a newly registered relish code origin."
   
   o = summon originId
   if o.isVerified
      => errf cat originId " is already verified."

   o.isVerified = true

   => "REDIRECT"
      cat "/registrationConfirmed?originId=" originId


registrationConfirmed originId String > String Any
"""
 Confirms that registration has been verified via response to confirmation email.
 Allows continuing on to generate private and public keys for the origin.
 Requires password to be entered to generate keys, as extra security measure.
"""
   => "registration_confirmed.html"
      {"originId"=>originId}String > String 


generateKeysAction originId String password String > String Any
"""
 Generates a private-key public-key pair for an origin.
 If a key pair has already been generated, asks for confirmation before re-keying the origin.
"""
   if not exists originId
      => errf cat originId " is not a registered relish code origin."

   o = summon originId
   if neq (base64Hash password) o.pwHash
      => errf "Incorrect passord for origin administration."    

   if not o.isVerified
      => errf cat originId " has not been confirmed by click on email message link."

   if o.publicKeyCert  // cert already exists - re-keying  
      => "confirm_rekey.html"
         {"originId"=>originId}String > String 

   privateKeyPem publicKeyPem err = 
      generateCertifiedKeyPair crypto.DEFAULT_RSA_KEY_LEN_BITS 
                               ""  // "origin"
                               ""  // "shared.relish.pl2012"
                               ""  // sharedRelishPlPrivateKeyPem
                               ""  // sharedRelishPlPrivateKeyPassword
                               "origin" 
                               originId 
                               password
   if err
      => errf err

   o.publicKeyCert = publicKeyPem
  
   => "keys.html"
      {
         "privateKey" => privateKeyPem
         "publicKey"  => publicKeyPem
         "originId"   => originId
      }String > String
   

confirmReKeyAction originId String password String > String Any
"""
 Generates a private-key public-key pair for an origin.
"""
   if not exists originId
      => errf cat originId " is not a registered relish code origin."

   o = summon originId
   if neq (base64Hash password) o.pwHash
      => errf "Incorrect passord for origin administration."    

   if not o.isVerified
      => errf cat originId " has not been confirmed by click on email message link."      

   privateKeyPem publicKeyPem err = 
      generateCertifiedKeyPair crypto.DEFAULT_RSA_KEY_LEN_BITS 
                               ""  // "origin"
                               ""  // "shared.relish.pl2012"
                               ""  // sharedRelishPlPrivateKeyPem
                               ""  // sharedRelishPlPrivateKeyPassword
                               "origin" 
                               originId 
                               password
   if err
      => errf err

   o.publicKeyCert = publicKeyPem

   => "keys.html"
      {
         "privateKey" => privateKeyPem
         "publicKey"  => publicKeyPem
         "originId"   => originId
      }String > String


loginAction > String String
"""
 Handles a request for the root (i.e. empty path) url on the server and port.
"""
   => "HTML FILE"
      "index.html"


upload > String String
"""
 Handles a request for the "upload a code artifact" page.
"""
   => "HTML FILE"
      "upload.html"


REPOSITORY_ROOT = "/opt/devel/relish/rt/shared/relish/replicas/"


uploadAction request http_srv.Request > String String
"""
 Processes an upload of artifact files.
"""
   fileList = uploadedFiles request "myfiles"
   for file in fileList
      fileName = name file
      err = open file
      if err
         => errf "Error opening uploaded file" fileName err
     
      content err = readAllBinary file
      if err
         => errf "Error reading uploaded file" fileName err

      close file
      if eq fileName "metadata.txt"
         print fileName
         print content
         snippet i = between content "origin: " "\n"
         originName = trimSpace snippet
         snippet i = between content "artifact: " "\n"
         artifactName = trimSpace snippet    
         artifactDirPath = cat REPOSITORY_ROOT originName "/" artifactName 
         err = mkdirAll artifactDirPath
         if err
            => errf err

         metadataFilePath = cat artifactDirPath "/metadata.txt"    
         metadataFile err = files.File metadataFilePath "w"
         if err
            => errf err

         write metadataFile content                   
         err = close metadataFile
         if err
            => errf err

      elif hasSuffix fileName ".zip"
         print fileName
         print len content

         sepPos = index fileName "--"
         originName = first fileName sepPos
         lastSepPos = lastIndex fileName "---"
         version = slice fileName 
                         plus lastSepPos 3
                         minus (len fileName) 4
         artifactName = slice fileName
                              plus sepPos 2
                              lastSepPos
         artifactName = replace artifactName "--" "/"   

         artifactDirPath = cat REPOSITORY_ROOT originName "/" artifactName 
         artifactVersionDirPath = cat artifactDirPath "/v" version 
         fileInfo versionDirExists err = stat artifactVersionDirPath
         if err
            => errf "Can't stat directory" artifactVersionDirPath err
         elif versionDirExists
            => errf cat "Error: Version " 
                        version 
                        " of " 
                        originName 
                        "/" 
                        artifactName 
                        " has already been uploaded. Cannot replace it."
    
         err = mkdirAll artifactVersionDirPath
         if err
            => errf err

         zipFilePath = cat artifactDirPath "/" fileName

         zipFile err = files.File zipFilePath "w"
         if err
            => errf err

         write zipFile content                   
         err = close zipFile
         if err
            => errf err

         srcZipContent err = extract1 content "artifactVersionContents.zip" 
         if err
            => errf err

         // Note: Should really verify the signed code here.   

         err = extract srcZipContent artifactVersionDirPath
         if err
            => errf "Could not extract artifact version contents zip file into" artifactVersionDirPath err              

      else 
         => errf cat "Error: Uploaded file " fileName " is not a metadata.txt file or an artifact version .zip file."

   => "HTML"
      """
<html>
Uploaded !
</html>
"""


setHostname > String String
"""
 Sets the hostname for the web app.
"""
   => "HTML"
      """
<html>
<form action="setHostNameAction" method="POST">
<p>
Hostname: <input type="text" size="20" name="hostName">
</p>
</form>
</html>
"""


setHostnameAction hostName String > String String
"""
 Sets the host name.
"""
   setToken hostName
   => "HTML"
      """
<html>
Done. Set hostname for webapp.
</html>
"""
